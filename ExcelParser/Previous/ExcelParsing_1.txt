using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Versioning;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using OfficeOpenXml;
using OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Text;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;

namespace ExcelParser
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        private string fName = "";
        private List<string> texts = new List<string>();
        private void SelectTextFile(object sender, EventArgs e)
        {
            var result = openFileDialog1.ShowDialog(); // Show the dialog.
            if (result == DialogResult.OK) // Test result.
            {
                var file = openFileDialog1.FileName;
                try
                {
                    if (openFileDialog1.SafeFileName != null) fName = openFileDialog1.SafeFileName.Replace(".txt", "");
                    var textContent = File.ReadAllText(file);
                    if (!string.IsNullOrEmpty(textContent))
                    {
                        var stringSeparators = new[] { "\r\n" };
                        texts = textContent.Split(stringSeparators, StringSplitOptions.None).ToList();
                    }
                }
                catch (IOException)
                {
                }
            }
        }

        private void SelectExcelFile(object sender, EventArgs e)
        {
            var result = openFileDialog2.ShowDialog(); // Show the dialog.
            if (result == DialogResult.OK) // Test result.
            {
                var file = openFileDialog2.FileName;
                try
                {
                    using (var fileStream = new FileStream(file, FileMode.Open))
                    {
                        var excel = new ExcelPackage(fileStream);
                        var workSheet = excel.Workbook.Worksheets[1];

                        var workSheetName = excel.Workbook.Worksheets[1].Name;

                        var start = workSheet.Dimension.Start;
                        var end = workSheet.Dimension.End;

                        var columns = new List<string>();

                        for (var col = start.Column; col <= end.Column; col++)
                        {
                            // ... Cell by cell...  
                            var cellValue = workSheet.Cells[1, col].Text; // This got me the actual value I needed.  
                            columns.Add(cellValue);
                        }

                        var rows = workSheet.Cells
                            .Select(cell => cell.Start.Row)
                            .Distinct()
                            .OrderBy(x => x);

                        var collection = rows.Skip(1)
                            .Select(row =>
                            {
                                var tnew = new ItemCol();
                                columns.ForEach(col =>
                                {
                                    //This is the real wrinkle to using reflection - Excel stores all numbers as double including int
                                    var val = workSheet.Cells[row, columns.IndexOf(col) + 1].Text;
                                    //If it is numeric it is a double since that is how excel stores all numbers
                                    var propertyInfo = typeof(ItemCol).GetProperty(col);
                                    if (propertyInfo != null)
                                        propertyInfo.SetValue(tnew, val, null);
                                });

                                return tnew;
                            }).ToList();

                        var li = collection.Select((x, i) => new { Index = i, Value = x })
                            .GroupBy(x => x.Index / 5)
                            .Select(x => x.Select(v => v.Value).ToList())
                            .ToList();

                        var outL = new List<ItemCol>();

                        if (li.Any() && texts.Any())
                        {
                            li.ForEach(l =>
                            {
                                var t = texts.ElementAt(li.IndexOf(l));

                                if (!string.IsNullOrEmpty(l[0].BARCODE_ID.Trim()))
                                {
                                    l[0].BARCODE_ID = t;
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(l[0].BARCODE_ID2.Trim()))
                                    {
                                        l[0].BARCODE_ID2 = t;
                                    }
                                }

                                if (!string.IsNullOrEmpty(l[1].BARCODE_ID.Trim()))
                                {
                                    l[1].BARCODE_ID = t;
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(l[1].BARCODE_ID2.Trim()))
                                    {
                                        l[1].BARCODE_ID2 = t;
                                    }
                                }

                                if (!string.IsNullOrEmpty(l[2].BARCODE_ID.Trim()))
                                {
                                    l[2].BARCODE_ID = t;
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(l[2].BARCODE_ID2.Trim()))
                                    {
                                        l[2].BARCODE_ID2 = t;
                                    }
                                }

                                if (!string.IsNullOrEmpty(l[3].BARCODE_ID.Trim()))
                                {
                                    l[3].BARCODE_ID = t;
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(l[3].BARCODE_ID2.Trim()))
                                    {
                                        l[3].BARCODE_ID2 = t;
                                    }
                                }

                                if (!string.IsNullOrEmpty(l[4].BARCODE_ID.Trim()))
                                {
                                    l[4].BARCODE_ID = t;
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(l[4].BARCODE_ID2.Trim()))
                                    {
                                        l[4].BARCODE_ID2 = t;
                                    }
                                }

                                outL.AddRange(l);

                            });
                        }

                        if (outL.Any())
                        {
                            var fi = new FileInfo(@"C:\Users\abum\Downloads\Documents\Demo\" + fName + ".xlsx");

                            using (var p = new ExcelPackage(fi))
                            {
                                var ws = p.Workbook.Worksheets.Add(workSheetName);
                               
                                ws.Cells[1, 1].Value = columns[0];
                                ws.Cells[1, 2].Value = columns[1];
                                ws.Cells[1, 3].Value = columns[2];
                                ws.Cells[1, 4].Value = columns[3];
                                ws.Row(1).Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                ws.Row(1).Style.Font.Bold = true;
                                ws.Row(1).Height = 11;
                                ws.Row(1).Style.Font.Size = 10;
                            
                                var recordIndex = 2;
                                outL.ForEach(f =>
                                {
                                    ws.Cells[recordIndex, 1].Value = f.LABEL;
                                    ws.Cells[recordIndex, 2].Value = f.PURPOSE;
                                    ws.Cells[recordIndex, 3].Value = f.BARCODE_ID;
                                    ws.Cells[recordIndex, 4].Value = f.BARCODE_ID2;
                                    ws.Row(recordIndex).Height = 11;
                                    ws.Row(recordIndex).Style.Font.Size = 10;
                                    ws.Row(recordIndex).Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    recordIndex++;
                                });

                                ws.Column(1).Width = 12;
                                ws.Column(2).Width = 18;
                                ws.Column(3).Width = 15;
                                ws.Column(4).Width = 15;
                                p.Save();
                            }
                        }

                    }
                }
                catch (Exception ex)
                {

                }
            }

        }

        public class ItemCol
        {
            public string LABEL { get; set; }
            public string PURPOSE { get; set; }
            public string BARCODE_ID { get; set; }
            public string BARCODE_ID2 { get; set; }

        }

    }
}
